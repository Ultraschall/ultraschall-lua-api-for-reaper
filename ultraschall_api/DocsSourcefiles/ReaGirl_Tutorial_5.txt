Tutorial for draggable images

In this tutorial, I will show you, how to make a gui, where an image is draggable to multiple destinations.
It will have one image, that can be dragged and two other images and a label, which act as destinations for the dragged source-image.
Dragging the source-image to the destination-images will change the destination-image to the one of the source image, while dragging to the label will show the filename+path of the source-image.

Let's start first with a basic-gui, that will show the source-image and have an empty run-function for the image.

```
dofile(reaper.GetResourcePath().."/UserPlugins/reagirl.lua")

function Image_Runfunction(element_id, imagepath_plus_filename, drag_destination)
  -- this function will be run when the image is clicked or dragged to a destination
end

-- start a new gui
reagirl.Gui_New()

-- add the source-image, which we will draggable
image1_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/bass.png", 20, 100, 100, 100, "Bass-guitar", "an image of a bass guitar", Image_Runfunction)


-- open gui
reagirl.Gui_Open("ReaGirl Settings", "various settings for ReaGirl-Accessible Guis", 665, 310, nil, nil, nil)

-- manage gui
function main()
  reagirl.Gui_Manage()
  
  if reagirl.Gui_IsOpen()==true then reaper.defer(main) end
end
main()
```

This will show our image of a bass guitar. Note, how the meaningOfUI_Element-parameter explains, that the image shows a bass-guitar. This is important for blind users, since they can't see the image and need to know, what the image looks like by you giving a short descriptin.
Clicking the image does nothing yet, as well as trying to drag.
Now, let's add our dragging-destinations, which will be a label and two images.

```
dofile(reaper.GetResourcePath().."/UserPlugins/reagirl.lua")

function Image_Runfunction(element_id, imagepath_plus_filename, drag_destination)
  -- this function will be run when the image is clicked or dragged to a destination
end

-- start a new gui
reagirl.Gui_New()

-- add the source-image, which we will draggable
image1_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/bass.png", 20, 100, 100, 100, "Bass-guitar", "an image of a bass guitar", Image_Runfunction)

-- add some additional images and a label, that are the destinations for the dragging
label_id = reagirl.Label_Add(240, 10, "Nothing has been dragged to this label, yet", "A destination for the source-image to drag to", 0, false, nil)
image2_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/amp.png", 220, 50, 100, 100, "Amplifier", "an image of an amplifier", nil)
image3_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/congas.png", 220, 160, 100, 100, "Congas", "an image of congas", nil)

-- open gui
reagirl.Gui_Open("ReaGirl Settings", "various settings for ReaGirl-Accessible Guis", 665, 310, nil, nil, nil)

-- manage gui
function main()
  reagirl.Gui_Manage()
  
  if reagirl.Gui_IsOpen()==true then reaper.defer(main) end
end
main()
```

This shows now the source and destination-images as well as a label. The parameter meaningOfUI_Element describes now, what the images are showing(amp, congas).

In the next step, we will make the source-image draggable. For this, we use the function reagirl.Image\_SetDraggable(), in which we can set, which ui-element shall be destination of the source-image-dragging.
It will look like this.

```
dofile(reaper.GetResourcePath().."/UserPlugins/reagirl.lua")

function Image_Runfunction(element_id, imagepath_plus_filename, drag_destination)
  -- this function will be run when the image is clicked or dragged to a destination
  reaper.MB("Dragged to: "..reagirl.UI_Element_GetSetCaption(drag_destination, false, ""), "", 0)
end

-- start a new gui
reagirl.Gui_New()

-- add the source-image, which we will draggable
image1_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/bass.png", 20, 100, 100, 100, "Bass-guitar", "an image of a bass guitar", Image_Runfunction)

-- add some additional images and a label, that are the destinations for the dragging
label_id = reagirl.Label_Add(240, 10, "Nothing has been dragged to this label, yet", "A destination for the source-image to drag to", 0, false, nil)
image2_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/amp.png", 220, 50, 100, 100, "Amplifier", "an image of an amplifier", nil)
image3_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/congas.png", 220, 160, 100, 100, "Congas", "an image of congas", nil)

-- add the element_ids of image2-4_id as drag-destinations of image1_id
reagirl.Image_SetDraggable(image1_id, true, {image2_id, image3_id, label_id})

-- open gui
reagirl.Gui_Open("ReaGirl Settings", "various settings for ReaGirl-Accessible Guis", 665, 310, nil, nil, nil)

-- manage gui
function main()
  reagirl.Gui_Manage()
  
  if reagirl.Gui_IsOpen()==true then reaper.defer(main) end
end
main()
```
You can see, that we pass to it the element\_ids of the destinations, like label\_id, image2\_id and image3\_id.
When you run this, you can drag the source-image of a bass-guitar around. You will see a smaller version of the image is shown at the mouse-cursor during dragging.
When dropping the source-image to a destination, the run-function of the source-image Image\_Runfunction will be run and show a messagebox that tells you, onto which ui-element you dragged the source-image.
It will use the function reagirl.UI\_Element\_GetSetCaption() to get the caption of the dragged ui-element.
The run-function uses the third parameter, drag\_destination, which will be sent to run-functions, once the image it is associated with, is set to draggable, like image1\_id is in our case.

Now, we want to make the label show the filename of the source-image when dropping the source-image onto it.

```
dofile(reaper.GetResourcePath().."/UserPlugins/reagirl.lua")

function Image_Runfunction(element_id, imagepath_plus_filename, drag_destination)
  -- this function will be run when the image is clicked or dragged to a destination
    if drag_destination==label_id then
    -- if source-image is dragged to the label, set labeltext to filename of the source-image
    
    -- get the filename of the source-image
    image_filename = reagirl.Image_GetImageFilename(element_id) 
    -- set label-text to filename of source-image
    reagirl.Label_SetLabelText(label_id, "Filename of source-image is: "..image_filename) 
  end
end

-- start a new gui
reagirl.Gui_New()

-- add the source-image, which we will draggable
image1_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/bass.png", 20, 100, 100, 100, "Bass-guitar", "an image of a bass guitar", Image_Runfunction)

-- add some additional images and a label, that are the destinations for the dragging
label_id = reagirl.Label_Add(240, 10, "Nothing has been dragged to this label, yet", "A destination for the source-image to drag to", 0, false, nil)
image2_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/amp.png", 220, 50, 100, 100, "Amplifier", "an image of an amplifier", nil)
image3_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/congas.png", 220, 160, 100, 100, "Congas", "an image of congas", nil)

-- add the element_ids of image2-4_id as drag-destinations of image1_id
reagirl.Image_SetDraggable(image1_id, true, {image2_id, image3_id, label_id})

-- open gui
reagirl.Gui_Open("ReaGirl Settings", "various settings for ReaGirl-Accessible Guis", 665, 310, nil, nil, nil)

-- manage gui
function main()
  reagirl.Gui_Manage()
  
  if reagirl.Gui_IsOpen()==true then reaper.defer(main) end
end
main()
```

When we drag the source-image now to the label, the run-function Image\_Runfunction is run, in which we check the parameter drag\_destination against the element\_id label\_id.
If the source-image has been dropped at the label(drag\_destination==label\_id) then we get the filename of the source-image and load it into the destination-image.

```
dofile(reaper.GetResourcePath().."/UserPlugins/reagirl.lua")

function Image_Runfunction(element_id, imagepath_plus_filename, drag_destination)
  -- this function will be run when the image is clicked or dragged to a destination
  if drag_destination==label_id then
    -- if source-image is dragged to the label, set labeltext to 
    -- filename of the source-image
    
    -- get the filename of the source-image
    image_filename = reagirl.Image_GetImageFilename(element_id) 
    -- set label-text to filename of source-image
    reagirl.Label_SetLabelText(label_id, "Filename of source-image is: "..image_filename) 
    -- change meaningOfUI_Element to reflect, what the label shows now for blind users
    reagirl.UI_Element_GetSetMeaningOfUIElement(label_id, true, "An image of a bass-guitar")
  
  elseif drag_destination==image2_id then
    -- if source_image is dragged to image2, change it's image to the
    -- one of the source-image
    
    -- get the filename of the source-image
    image_filename = reagirl.Image_GetImageFilename(element_id)
    -- load the filename of the source-image in the destination-image
    reagirl.Image_Load(drag_destination, image_filename)
    -- change meaningOfUI_Element to reflect, what the image shows now for blind users
    reagirl.UI_Element_GetSetMeaningOfUIElement(drag_destination, true, "An image of a bass-guitar")
  
  elseif drag_destination==image3_id then
    -- if source_image is dragged to image2, change it's image to the
    -- one of the source-image
    
    -- get the filename of the source-image
    image_filename = reagirl.Image_GetImageFilename(element_id)
    -- load the filename of the source-image in the destination-image
    reagirl.Image_Load(drag_destination, image_filename)
    -- change meaningOfUI_Element to reflect, what the image shows now for blind users
    reagirl.UI_Element_GetSetMeaningOfUIElement(drag_destination, true, "An image of a bass-guitar")
  end
end

-- start a new gui
reagirl.Gui_New()

-- add the source-image, which we will draggable
image1_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/bass.png", 20, 100, 100, 100, "Bass-guitar", "an image of a bass guitar", Image_Runfunction)

-- add some additional images and a label, that are the destinations for the dragging
label_id = reagirl.Label_Add(240, 10, "Nothing has been dragged to this label, yet", "A destination for the source-image to drag to", 0, false, nil)
image2_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/amp.png", 220, 50, 100, 100, "Amplifier", "an image of an amplifier", nil)
image3_id = reagirl.Image_Add(reaper.GetResourcePath().."/Data/track_icons/congas.png", 220, 160, 100, 100, "Congas", "an image of congas", nil)

-- add the element_ids of image2-4_id as drag-destinations of image1_id
reagirl.Image_SetDraggable(image1_id, true, {image2_id, image3_id, label_id})

-- open gui
reagirl.Gui_Open("ReaGirl Settings", "various settings for ReaGirl-Accessible Guis", 665, 310, nil, nil, nil)

-- manage gui
function main()
  reagirl.Gui_Manage()
  
  if reagirl.Gui_IsOpen()==true then reaper.defer(main) end
end
main()
```